#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define strnk   0
#define syml    1
#define symr    2
#define numb    3
#define vimnav  4
#define fn      5
#define sym     6

&led_strip {
    chain-length = <23>;
};

&mt {
    // tapping-term-ms = <TAPPING_TERM>;
    // quick-tap-ms = <QUICK_TAP_TERM>;
    flavor = "tap-preferred";
};

&lt {
    tapping-term-ms = <200>;
};

/ {

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp ESC>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <13 30>;
            bindings = <&kp TAB>;
        };
        combo_ent {
            timeout-ms = <50>;
            key-positions = <16 32>;
            bindings = <&kp RET >;
        };
        combo_colon {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp COLON >;
        };
    };
    behaviors {
        ad_mgc: adaptive_magic {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_MAGIC";
            #binding-cells = <0>;
			defaults = <&none>;
            bindings = <&kp L>, <&kp E>;
			antecedents = <R H>;
			max-delay-ms = <250>;
        };
        ad_rpt: adaptive_repeat {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_REPEAT";
            #binding-cells = <0>;
			defaults = <&key_repeat>;
            bindings = <&kp L>, <&kp E &kp L &kp L &kp O>;
			antecedents = <R H>;
			max-delay-ms = <250>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        strnk_layer {
            bindings = <

            &kp V        &kp M        &kp L       &kp C       &kp P                &kp X      &kp F       &kp O          &kp U      &kp J
            &mt LCTRL S  &kp T        &lt numb R  &lt symr D  &kp Y                &ad_mgc    &lt syml N  &lt vimnav A   &kp E      &mt RCTRL I
            &mt LGUI Z   &kp K        &mt RSHFT Q &mt RALT G  &kp W                &kp B      &mt RALT H  &mt RSHFT DOT  &kp SQT    &mt RGUI COMMA
                                                  &kp SPACE   &sk LSHFT            &ad_rpt    &kp BSPC
                    
            >;
        };



        syml_layer {
            bindings = <

            &kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT            &trans     &trans     &trans     &trans     &trans
            &kp TILDE  &kp GRAVE  &kp LBRC   &kp RBRC   &kp PIPE             &trans     &trans     &trans     &trans     &trans
            &kp BSLH   &kp SEMI   &kp LBKT   &kp RBKT   &kp QMARK            &trans     &trans     &trans     &trans     &trans
                                             &trans     &trans               &trans     &trans

            >;
        };



        symr_layer {
            bindings = <

            &trans     &trans     &trans     &trans     &trans               &kp CARET  &kp AMPS   &kp STAR   &kp PLUS   &kp EQUAL
            &trans     &trans     &trans     &trans     &trans               &kp MINUS  &kp LPAR   &kp RPAR   &kp SQT    &kp COLON
            &trans     &trans     &trans     &trans     &trans               &kp UNDER  &kp LT     &kp GT     &kp DQT    &kp SLASH
                                             &trans     &trans               &trans     &trans
                    
            >;
        };



        numb_layer {
            bindings = <

            &trans     &trans     &trans     &trans     &trans               &kp STAR   &kp N7     &kp N8     &kp N9     &kp PLUS
            &trans     &trans     &trans     &trans     &trans               &kp N0     &kp N4     &kp N5     &kp N6     &kp MINUS
            &trans     &trans     &trans     &trans     &trans               &kp SLASH  &kp N1     &kp N2     &kp N3     &kp EQUAL
                                             &trans     &trans               &mo sym    &trans

            >;
        };



        vimnav_layer {
            bindings = <

            &kp N7        &kp N8        &kp N9       &trans     &kp V               &trans     &kp UP     &trans     &trans     &trans
            &mt LCTRL N4  &kp N5        &kp N6       &kp N0     &kp D               &kp I      &kp LEFT   &trans     &kp RIGHT  &mt RCTRL A
            &mt LGUI N1   &mt LSHFT N2  &mt LALT N3  &kp W      &trans              &trans     &kp DOWN   &kp RALT   &kp RSHFT  &kp RGUI
                                                     &trans     &trans              &mo sym    &trans

            >;
        };



        fn_layer {
            bindings = <

            &trans     &trans     &trans     &trans     &trans               &trans     &kp F7     &kp F8     &kp F9     &kp F10
            &trans     &trans     &trans     &trans     &trans               &trans     &kp F4     &kp F5     &kp F6     &kp F11
            &trans     &trans     &trans     &trans     &trans               &trans     &kp F1     &kp F2     &kp F3     &kp F12
                                             &trans     &trans               &trans     &trans

            >;
        };



        sym_layer {
            bindings = <

            &kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT            &kp CARET  &kp AMPS   &kp STAR   &kp PLUS   &kp EQUAL
            &kp TILDE  &kp GRAVE  &kp LBRC   &kp RBRC   &kp PIPE             &kp MINUS  &kp LPAR   &kp RPAR   &kp SQT    &kp COLON
            &kp BSLH   &kp SEMI   &kp LBKT   &kp RBKT   &kp QMARK            &kp UNDER  &kp LT     &kp GT     &kp DQT    &kp SLASH
                                             &trans     &trans               &trans     &trans

            >;
        };
    };
};
