#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_34keys.h"

#define strdy   0
#define syml    1
#define symr    2
#define numb    3
#define nav  4
#define fn      5
#define sym     6
#define games   7

#define QUICK_TAP_MS 175

// Homerow mods config

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH1 LH0 RH0 RH1                                              // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )

MAKE_HRM(hrl, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hrr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

MAKE_HRM(hll, &mo, &kp, KEYS_R THUMBS)  // left-hand layer tap HRMs 
MAKE_HRM(hlr, &mo, &kp, KEYS_L THUMBS)  // right-hand layer tap HRMs

// MAKE_HRM(hrm_l_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
// MAKE_HRM(hrm_r_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
// MAKE_HRM(hrm_r_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "

&mt { 
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick-tap-ms = <220>;
    hold-trigger-key-positions = <0>;
};

&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick-tap-ms = <220>;
    hold-trigger-key-positions = <0>;
};

/ {

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <13 31>;
            bindings = <&kp TAB>;
        };
        combo_ent {
            timeout-ms = <50>;
            key-positions = <16 32>;
            bindings = <&kp RET>;
        };
        combo_colon {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp COLON>;
        };
    };

    macros {
        // magic key overrides
        ZMK_MACRO(macro_efore,
            bindings = <&kp E &kp F &kp O &kp R &kp E>;
        )
        ZMK_MACRO(macro_on,
            bindings = <&kp O &kp N>;
        )
        ZMK_MACRO(macro_ust,
            bindings = <&kp U &kp S &kp T>;
        )
        ZMK_MACRO(macro_ent,
            bindings = <&kp E &kp N &kp T>;
        )
        ZMK_MACRO(macro_ion,
            bindings = <&kp I &kp O &kp N>;
        )
        ZMK_MACRO(macro_ment,
            bindings = <&kp M &kp E &kp N &kp T>;
        )
        ZMK_MACRO(macro_er,
            bindings = <&kp E &kp R>;
        )
        ZMK_MACRO(macro_hich,
            bindings = <&kp H &kp I &kp C &kp H>;
        )
        ZMK_MACRO(macro_es,
            bindings = <&kp E &kp S>;
        )
        ZMK_MACRO(macro__but,
            bindings = <&kp SPACE &kp B &kp U &kp T>;
        )
        ZMK_MACRO(macro_the,
            bindings = <&kp T &kp H &kp E>;
        )
        // repeat key overrides
        ZMK_MACRO(macro_nd,
            bindings = <&kp N &kp D>;
        )
        ZMK_MACRO(macro_ng,
            bindings = <&kp N &kp G>;
        )
        ZMK_MACRO(macro_ou,
            bindings = <&kp O &kp U>;
        )
        ZMK_MACRO(macro_ecause,
            bindings = <&kp E &kp C &kp C &kp A &kp U &kp S &kp E>;
        )
        ZMK_MACRO(macro_ould,
            bindings = <&kp O &kp U &kp L &kp D>;
        )
        ZMK_MACRO(macro__and,
            bindings = <&kp SPACE &kp A &kp N &kp D>;
        )
        ZMK_MACRO(macro_org,
            bindings = <&kp O &kp R &kp G>;
        )
        ZMK_MACRO(macro_for,
            bindings = <&kp F &kp O &kp R>;
        )
    };

    behaviors {
        ad_mgc: adaptive_magic {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_MAGIC";
            #binding-cells = <0>;
			defaults = <&none>;
            bindings = <&kp O>, <&macro_efore>, <&kp Y>, <&kp Y>, <&kp U>, <&kp Y>, <&macro_on>, <&macro_ust>, <&kp S>, <&kp K>, <&macro_ent>, <&macro_ion>, <&kp A>, <&kp Y>, <&kp L>, <&kp K>, <&macro_ment>, <&kp E>, <&macro_er>, <&macro_hich>, <&macro_es>, <&kp P>;
			antecedents = <A B C D E G I J K L M N O P R S T U V W X Y>;
			max-delay-ms = <250>;
        };
        ad_rpt: adaptive_repeat {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_REPEAT";
            #binding-cells = <0>;
			defaults = <&key_repeat>;
            bindings = <&macro_nd>, <&macro_ng>, <&macro_ou>, <&kp F>, <&macro_ecause>, <&macro_ould>, <&kp K>;
			antecedents = <A I Y N B W C>;
			max-delay-ms = <250>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        strdy_layer {
            bindings = <

            &kp V     &kp M        &kp L        &kp C        &kp P                &kp X      &kp F        &kp O           &kp U        &kp J
            &kp S     &hrl LCTRL T &hrl LALT R  &hrl LGUI D  &kp Y                &ad_mgc    &hrr RGUI N  &hrr RALT A     &hrr RCTRL E &kp I
            &kp Z     &kp K        &hll numb Q  &hll symr G  &kp W                &kp B      &hlr syml H  &hlr nav DOT    &kp SQT      &kp COMMA
                                                &sk LSHFT    &kp SPACE            &kp BSPC   &ad_rpt
                    
            >;
        };


        syml_layer {
            bindings = <

            &kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT            &trans     &trans     &trans     &trans     &trans
            &kp TILDE  &kp GRAVE  &kp LBRC   &kp RBRC   &kp SLASH            &trans     &trans     &trans     &trans     &trans
            &kp BSLH   &kp SEMI   &kp LBKT   &kp RBKT   &kp PIPE             &trans     &trans     &trans     &trans     &trans
                                             &trans     &trans               &trans     &trans

            >;
        };



        symr_layer {
            bindings = <

            &trans     &trans     &trans     &trans     &trans               &kp CARET  &kp AMPS   &kp STAR   &kp PLUS   &kp EQUAL
            &trans     &trans     &trans     &trans     &trans               &kp MINUS  &kp LPAR   &kp RPAR   &kp SQT    &kp COLON
            &trans     &trans     &trans     &trans     &trans               &kp UNDER  &kp LT     &kp GT     &kp DQT    &kp QMARK
                                             &trans     &trans               &trans     &trans
                    
            >;
        };



        numb_layer {
            bindings = <

            &trans     &trans     &trans     &trans     &trans               &kp STAR   &kp N7     &kp N8     &kp N9     &kp PLUS
            &trans     &trans     &trans     &trans     &trans               &kp N0     &kp N4     &kp N5     &kp N6     &kp MINUS
            &trans     &trans     &trans     &trans     &trans               &kp SLASH  &kp N1     &kp N2     &kp N3     &kp EQUAL
                                             &trans     &mo fn               &mo sym    &trans

            >;
        };



        nav_layer {
            bindings = <

            &trans        &trans        &kp UP        &trans      &trans              &trans     &trans     &trans     &trans     &trans
            &trans        &kp LEFT      &kp DOWN      &kp RIGHT   &trans              &trans     &kp RGUI   &kp RALT   &kp RCTRL  &trans
            &trans        &trans        &trans        &trans      &trans              &trans     &trans     &trans     &trans     &trans
                                                      &trans      &trans              &trans     &trans

            >;
        };


        fn_layer {
            bindings = <

            &trans      &trans      &trans     &trans       &trans                       &bt BT_SEL 0   &kp F7      &kp F8     &kp F9     &kp F10
            &trans      &trans      &trans     &trans       &trans                       &bt BT_SEL 1   &kp F4      &kp F5     &kp F6     &kp F11
            &trans      &trans      &trans     &trans       &trans                       &bt BT_CLR_ALL &kp F1      &kp F2     &kp F3     &kp F12
                                               &trans       &trans                       &to games      &trans

            >;
        };



        sym_layer {
            bindings = <

            &kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT            &kp CARET  &kp AMPS   &kp STAR   &kp PLUS   &kp EQUAL
            &kp TILDE  &kp GRAVE  &kp LBRC   &kp RBRC   &kp SLASH            &kp MINUS  &kp LPAR   &kp RPAR   &kp SQT    &kp COLON
            &kp BSLH   &kp SEMI   &kp LBKT   &kp RBKT   &kp PIPE             &kp UNDER  &kp LT     &kp GT     &kp DQT    &kp QMARK
                                             &trans     &trans               &trans     &trans

            >;
        };

        games_layer {
            bindings = <
            
            &kp ESC      &kp Q      &kp X      &kp E      &kp R                &kp F1     &kp F2     &kp F3     &kp F4     &kp F5
            &kp LSHIFT   &kp A      &kp W      &kp D      &kp F                &kp G      &kp H      &kp J      &kp K      &kp L
            &kp LCTRL    &kp Z      &kp S      &kp C      &kp V                &kp B      &kp N      &kp M      &kp DQT    &kp QMARK
                                               &kp LALT   &kp SPACE            &to strdy  &trans

            >;
        };
    };
};
